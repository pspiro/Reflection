package positions;

import org.json.simple.JsonObject;
import org.web3j.crypto.Keys;

import common.Util;
import http.MyClient;
import reflection.Config;
import tw.util.S;
import web3.Erc20;

public class NodeServer {
	static String pulseRpc = "https://rpc.pulsechain.com/";

	static NodeServer pulse = new NodeServer( pulseRpc);
	static String prod = "0x2703161D6DD37301CEd98ff717795E14427a462B";
	
	public static NodeServer server;  // must be set when config is read

	
	private String rpcUrl;  // note you can get your very own rpc url from Moralis for more bandwidth
	
	NodeServer( String rpc) {
		rpcUrl = rpc;
	}

	/** This can be a node created for you on Moralis, which you pay for, or a free node.
	 *  Currently using the free node; if you hit pacing limits, switch to the Moralis node.
	 *  The Moralis node requires auth data */
	JsonObject nodeQuery(String body) throws Exception {
		Util.require( rpcUrl != null, "Set the node rpcUrl");

		return MyClient.create( rpcUrl, body)
				.header( "accept", "application/json")
				.header( "content-type", "application/json")
				.queryToJson();
	}



	public long getBlockNumber() throws Exception {
		String body = """
			{
			"jsonrpc": "2.0",
			"id": 1,
			"method": "eth_blockNumber"
			}""";
		return nodeQuery( body).getLong( "result");
	}

	/** Get the n latest blocks and for each return the gas price that covers
	 *  pct percent of the transactions */
	public JsonObject getFeeHistory(int blocks, int pct) throws Exception {
		String body = String.format( """
			{
			"jsonrpc": "2.0",
			"id": 1,
			"method": "eth_feeHistory",
			"params": [
				"%s",
				"latest",
				[ %s ]
			]
			}""", blocks, pct); 
		return nodeQuery( body);
	}
	
	public JsonObject getLatestBlock() throws Exception {
		// the boolean says if it gets the "full" block or not
		String body = """
			{
			"jsonrpc": "2.0",
			"id": 1,
			"method": "eth_getBlockByNumber",
			"params": [	"latest", false ]
			}""";
		return nodeQuery( body);
	}
	
	public JsonObject getQueuedTrans( String from) throws Exception {
		String body = """
				{
				"jsonrpc": "2.0",
				"id": 1,
				"method": "txpool_content"
				}""";
		return nodeQuery( body);  // result -> pending and result -> queued
	}

	public double getNativeBalance(String walletAddr) throws Exception {
		String body = String.format( """
				{
				"jsonrpc": "2.0",
				"id": 1,
				"method": "eth_getBalance",
				"params": [ "%s", "latest" ]
				}""", walletAddr);
		
		return Erc20.fromBlockchain( nodeQuery( body).getString( "result"), 18);
	}

	
	public static void main(String[] args) throws Exception {
		S.out( pulse.getNativeBalance( prod) );
	}
	
	public void showTrans() throws Exception {
		Config c = Config.ask( "Dt2");
		JsonObject result = getQueuedTrans("").getObject("result");

		S.out( "Pending");
		show( result.getObject( "pending"), c.ownerAddr() );
		
		S.out( "");
		S.out( "Queued");
		show( result.getObject( "queued"), c.ownerAddr() );
	}
	// I think the issue is that you have pending trans that will never get picked up
	// and they are blocking next trans; they have to be removed
	static void show( JsonObject obj, String addr) throws Exception {
		obj.getObjectNN( Keys.toChecksumAddress(addr) ).display();
	}
		
	
    /** webj3 version generated by chat; it can do this all using web3j if you prefer */
//public BigDecimal getNativeBalance(String walletAddress) throws Exception {
//  // Connect to the blockchain
//  Web3j web3 = Web3j.build(new HttpService(rpcUrl));
//
//  // Request the balance
//  EthGetBalance ethGetBalance = web3.ethGetBalance(walletAddress, DefaultBlockParameterName.LATEST).send();
//
//  // Convert Wei to Ether
//  return new BigDecimal(ethGetBalance.getBalance()).divide(new BigDecimal("1000000000000000000"));
//
//  // Return the balance in Ether
//  return balanceInEther;
//}
}
